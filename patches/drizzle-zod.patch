diff --git a/column.types.d.cts b/column.types.d.cts
index 00c0cbcdf79915d28d850c9ddcef994f8caba8c1..68c11019bba9860117ce240b6bb32ff84be57306 100644
--- a/column.types.d.cts
+++ b/column.types.d.cts
@@ -9,9 +9,9 @@ export type GetBaseColumn<TColumn extends Column> = TColumn['_'] extends {
 } ? IsNever<TColumn['_']['baseColumn']> extends false ? TColumn['_']['baseColumn'] : undefined : undefined;
 export type GetZodType<TData, TDataType extends string, TEnumValues extends [string, ...string[]] | undefined, TBaseColumn extends Column | undefined> = TBaseColumn extends Column ? z.ZodArray<GetZodType<TBaseColumn['_']['data'], TBaseColumn['_']['dataType'], GetEnumValuesFromColumn<TBaseColumn>, GetBaseColumn<TBaseColumn>>> : ArrayHasAtLeastOneValue<TEnumValues> extends true ? z.ZodEnum<Assume<TEnumValues, [string, ...string[]]>> : TData extends infer TTuple extends [any, ...any[]] ? z.ZodTuple<Assume<{
     [K in keyof TTuple]: GetZodType<TTuple[K], string, undefined, undefined>;
-}, [any, ...any[]]>> : TData extends Date ? z.ZodDate : TData extends Buffer ? z.ZodType<Buffer> : TDataType extends 'array' ? z.ZodArray<GetZodType<Assume<TData, any[]>[number], string, undefined, undefined>> : TData extends infer TDict extends Record<string, any> ? z.ZodObject<{
+}, [any, ...any[]]>> : TData extends Date ? z.ZodDate : TDataType extends 'array' ? z.ZodArray<GetZodType<Assume<TData, any[]>[number], string, undefined, undefined>> : TData extends infer TDict extends Record<string, any> ? z.ZodObject<{
     [K in keyof TDict]: GetZodType<TDict[K], string, undefined, undefined>;
-}, 'strip'> : TDataType extends 'json' ? z.ZodType<Json> : TData extends number ? z.ZodNumber : TData extends bigint ? z.ZodBigInt : TData extends boolean ? z.ZodBoolean : TData extends string ? z.ZodString : z.ZodTypeAny;
+}, 'strip'> : TDataType extends 'json' ? z.ZodType<Json> : TData extends number ? z.ZodNumber : TData extends bigint ? z.ZodBigInt : TData extends boolean ? z.ZodBoolean : TData extends string ? z.ZodString : TData extends Buffer ? z.ZodType<Buffer> : z.ZodTypeAny;
 type HandleSelectColumn<TSchema extends z.ZodTypeAny, TColumn extends Column> = TColumn['_']['notNull'] extends true ? TSchema : z.ZodNullable<TSchema>;
 type HandleInsertColumn<TSchema extends z.ZodTypeAny, TColumn extends Column> = ColumnIsGeneratedAlwaysAs<TColumn> extends true ? never : TColumn['_']['notNull'] extends true ? TColumn['_']['hasDefault'] extends true ? z.ZodOptional<TSchema> : TSchema : z.ZodOptional<z.ZodNullable<TSchema>>;
 type HandleUpdateColumn<TSchema extends z.ZodTypeAny, TColumn extends Column> = ColumnIsGeneratedAlwaysAs<TColumn> extends true ? never : TColumn['_']['notNull'] extends true ? z.ZodOptional<TSchema> : z.ZodOptional<z.ZodNullable<TSchema>>;
diff --git a/column.types.d.mts b/column.types.d.mts
index 1813f946a4f4a5320f00b92a8b9962152911fb2f..6d8c4cf3c349f972e69e8d26e42771c394787fff 100644
--- a/column.types.d.mts
+++ b/column.types.d.mts
@@ -9,9 +9,9 @@ export type GetBaseColumn<TColumn extends Column> = TColumn['_'] extends {
 } ? IsNever<TColumn['_']['baseColumn']> extends false ? TColumn['_']['baseColumn'] : undefined : undefined;
 export type GetZodType<TData, TDataType extends string, TEnumValues extends [string, ...string[]] | undefined, TBaseColumn extends Column | undefined> = TBaseColumn extends Column ? z.ZodArray<GetZodType<TBaseColumn['_']['data'], TBaseColumn['_']['dataType'], GetEnumValuesFromColumn<TBaseColumn>, GetBaseColumn<TBaseColumn>>> : ArrayHasAtLeastOneValue<TEnumValues> extends true ? z.ZodEnum<Assume<TEnumValues, [string, ...string[]]>> : TData extends infer TTuple extends [any, ...any[]] ? z.ZodTuple<Assume<{
     [K in keyof TTuple]: GetZodType<TTuple[K], string, undefined, undefined>;
-}, [any, ...any[]]>> : TData extends Date ? z.ZodDate : TData extends Buffer ? z.ZodType<Buffer> : TDataType extends 'array' ? z.ZodArray<GetZodType<Assume<TData, any[]>[number], string, undefined, undefined>> : TData extends infer TDict extends Record<string, any> ? z.ZodObject<{
+}, [any, ...any[]]>> : TData extends Date ? z.ZodDate : TDataType extends 'array' ? z.ZodArray<GetZodType<Assume<TData, any[]>[number], string, undefined, undefined>> : TData extends infer TDict extends Record<string, any> ? z.ZodObject<{
     [K in keyof TDict]: GetZodType<TDict[K], string, undefined, undefined>;
-}, 'strip'> : TDataType extends 'json' ? z.ZodType<Json> : TData extends number ? z.ZodNumber : TData extends bigint ? z.ZodBigInt : TData extends boolean ? z.ZodBoolean : TData extends string ? z.ZodString : z.ZodTypeAny;
+}, 'strip'> : TDataType extends 'json' ? z.ZodType<Json> : TData extends number ? z.ZodNumber : TData extends bigint ? z.ZodBigInt : TData extends boolean ? z.ZodBoolean : TData extends string ? z.ZodString : TData extends Buffer ? z.ZodType<Buffer> : z.ZodTypeAny;
 type HandleSelectColumn<TSchema extends z.ZodTypeAny, TColumn extends Column> = TColumn['_']['notNull'] extends true ? TSchema : z.ZodNullable<TSchema>;
 type HandleInsertColumn<TSchema extends z.ZodTypeAny, TColumn extends Column> = ColumnIsGeneratedAlwaysAs<TColumn> extends true ? never : TColumn['_']['notNull'] extends true ? TColumn['_']['hasDefault'] extends true ? z.ZodOptional<TSchema> : TSchema : z.ZodOptional<z.ZodNullable<TSchema>>;
 type HandleUpdateColumn<TSchema extends z.ZodTypeAny, TColumn extends Column> = ColumnIsGeneratedAlwaysAs<TColumn> extends true ? never : TColumn['_']['notNull'] extends true ? z.ZodOptional<TSchema> : z.ZodOptional<z.ZodNullable<TSchema>>;
diff --git a/column.types.d.ts b/column.types.d.ts
index e43261d5a307b335a64bcd70daa95f9217fd7c6d..1b114cfe3a62263f098d818abd5fc2cb7a09b74c 100644
--- a/column.types.d.ts
+++ b/column.types.d.ts
@@ -9,9 +9,9 @@ export type GetBaseColumn<TColumn extends Column> = TColumn['_'] extends {
 } ? IsNever<TColumn['_']['baseColumn']> extends false ? TColumn['_']['baseColumn'] : undefined : undefined;
 export type GetZodType<TData, TDataType extends string, TEnumValues extends [string, ...string[]] | undefined, TBaseColumn extends Column | undefined> = TBaseColumn extends Column ? z.ZodArray<GetZodType<TBaseColumn['_']['data'], TBaseColumn['_']['dataType'], GetEnumValuesFromColumn<TBaseColumn>, GetBaseColumn<TBaseColumn>>> : ArrayHasAtLeastOneValue<TEnumValues> extends true ? z.ZodEnum<Assume<TEnumValues, [string, ...string[]]>> : TData extends infer TTuple extends [any, ...any[]] ? z.ZodTuple<Assume<{
     [K in keyof TTuple]: GetZodType<TTuple[K], string, undefined, undefined>;
-}, [any, ...any[]]>> : TData extends Date ? z.ZodDate : TData extends Buffer ? z.ZodType<Buffer> : TDataType extends 'array' ? z.ZodArray<GetZodType<Assume<TData, any[]>[number], string, undefined, undefined>> : TData extends infer TDict extends Record<string, any> ? z.ZodObject<{
+}, [any, ...any[]]>> : TData extends Date ? z.ZodDate : TDataType extends 'array' ? z.ZodArray<GetZodType<Assume<TData, any[]>[number], string, undefined, undefined>> : TData extends infer TDict extends Record<string, any> ? z.ZodObject<{
     [K in keyof TDict]: GetZodType<TDict[K], string, undefined, undefined>;
-}, 'strip'> : TDataType extends 'json' ? z.ZodType<Json> : TData extends number ? z.ZodNumber : TData extends bigint ? z.ZodBigInt : TData extends boolean ? z.ZodBoolean : TData extends string ? z.ZodString : z.ZodTypeAny;
+}, 'strip'> : TDataType extends 'json' ? z.ZodType<Json> : TData extends number ? z.ZodNumber : TData extends bigint ? z.ZodBigInt : TData extends boolean ? z.ZodBoolean : TData extends string ? z.ZodString : TData extends Buffer ? z.ZodType<Buffer> : z.ZodTypeAny;
 type HandleSelectColumn<TSchema extends z.ZodTypeAny, TColumn extends Column> = TColumn['_']['notNull'] extends true ? TSchema : z.ZodNullable<TSchema>;
 type HandleInsertColumn<TSchema extends z.ZodTypeAny, TColumn extends Column> = ColumnIsGeneratedAlwaysAs<TColumn> extends true ? never : TColumn['_']['notNull'] extends true ? TColumn['_']['hasDefault'] extends true ? z.ZodOptional<TSchema> : TSchema : z.ZodOptional<z.ZodNullable<TSchema>>;
 type HandleUpdateColumn<TSchema extends z.ZodTypeAny, TColumn extends Column> = ColumnIsGeneratedAlwaysAs<TColumn> extends true ? never : TColumn['_']['notNull'] extends true ? z.ZodOptional<TSchema> : z.ZodOptional<z.ZodNullable<TSchema>>;
